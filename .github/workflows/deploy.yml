name: Deploy Terraform + Docker

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      
      - name: Instalar OCI CLI
        run: |
          bash -c "$(curl -L https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh)" -- --accept-all-defaults
          echo "$HOME/bin" >> $GITHUB_PATH

      - name: Configurar OCI CLI
        run: |
          mkdir -p ~/.oci
          cat <<EOF > ~/.oci/config
          [DEFAULT]
          user=${{ secrets.TF_USER_OCID }}
          fingerprint=${{ secrets.TF_FINGERPRINT }}
          key_file=${{ secrets.TF_PRIVATE_KEY_PATH }}
          tenancy=${{ secrets.TF_TENANCY_OCID }}
          region=${{ secrets.TF_REGION }}
          EOF

      - name: Verificar si la instancia existe
        id: check_vm
        run: |
          INST=$(oci compute instance list \
            --compartment-id ${{ secrets.TF_COMPARTMENT_OCID }} \
            --query "data[?\"display-name\"=='mi-vm'].{Name:'display-name',State:'lifecycle-state',IP:'public-ip'}" \
            --raw-output)
          if [ -n "$INST" ]; then
            IP=$(echo $INST | jq -r '.[0].IP')
            echo "instance_exists=true" >> $GITHUB_OUTPUT
            echo "public_ip=$IP" >> $GITHUB_OUTPUT
          else
            echo "instance_exists=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Setup Terraform
        if: steps.check_vm.outputs.instance_exists == 'false'
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.7.0
          terraform_wrapper: false
          
      - name: Guardar clave privada en runner
        if: steps.check_vm.outputs.instance_exists == 'false'
        run: |
          mkdir -p ~/.oci
          echo "${{ secrets.TF_PRIVATE_KEY }}" | tr -d '\r' > ~/.oci/oci_api_key.pem
          chmod 600 ~/.oci/oci_api_key.pem

      - name: Crear terraform.tfvars
        if: steps.check_vm.outputs.instance_exists == 'false'
        working-directory: terraform
        run: |
          cat <<EOF > terraform.tfvars
          tenancy_ocid = "${{ secrets.TF_TENANCY_OCID }}"
          user_ocid = "${{ secrets.TF_USER_OCID }}"
          fingerprint = "${{ secrets.TF_FINGERPRINT }}"
          private_key_path = "~/.oci/oci_api_key.pem"
          region = "${{ secrets.TF_REGION }}"
          compartment_ocid = "${{ secrets.TF_COMPARTMENT_OCID }}"
          subnet_id = "${{ secrets.TF_SUBNET_ID }}"
          availability_domain = "${{ secrets.TF_AVAILABILITY_DOMAIN }}"
          ubuntu_image = "${{ secrets.TF_UBUNTU_IMAGE }}"
          ssh_public_key = "${{ secrets.TF_SSH_PUBLIC_KEY }}"
          EOF

      - name: Terraform Init & Apply
        if: steps.check_vm.outputs.instance_exists == 'false'
        id: terraform
        working-directory: terraform
        run: |
          terraform init
          terraform apply -auto-approve

      - name: Definir IP final
        id: final_ip
        run: |
          if [ "${{ steps.check_vm.outputs.instance_exists }}" = "true" ]; then
            echo "public_ip=${{ steps.check_vm.outputs.public_ip }}" >> $GITHUB_OUTPUT
          else
            IP=$(terraform output -raw public_ip)
            echo "public_ip=$IP" >> $GITHUB_OUTPUT
          fi

      - name: Esperar que el servidor esté listo
        if: steps.check_vm.outputs.instance_exists == 'false'
        run: sleep 30

      - name: Configurar SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{secrets.SSH_PRIVATE_KEY}}

      - name: Copiar y ejecutar setup_vm.sh
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ steps.final_ip.outputs.public_ip }}
          username: ${{secrets.SSH_USER}}
          key: ${{secrets.SSH_PRIVATE_KEY}}
          source: setup_vm.sh
          target: /tmp/

      - name: Ejecutar setup_vm.sh
        uses: appleboy/ssh-action@master
        with:
          host: ${{ steps.final_ip.outputs.public_ip }}
          username: ${{secrets.SSH_USER}}
          key: ${{secrets.SSH_PRIVATE_KEY}}
          script: |
            chmod +x /tmp/setup_vm.sh
            /tmp/setup_vm.sh ${{secrets.SSH_USER}}
            rm /tmp/setup_vm.sh

      - name: Copiar docker-compose.yml
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ steps.final_ip.outputs.public_ip }}
          username: ${{secrets.SSH_USER}}
          key: ${{secrets.SSH_PRIVATE_KEY}}
          source: docker-compose.yml
          target: "/home/${{secrets.SSH_USER}}/deploy/"

      - name: Ejecutar Docker Compose
        uses: appleboy/ssh-action@master
        with:
          host: ${{ steps.final_ip.outputs.public_ip }}
          username: ${{secrets.SSH_USER}}
          key: ${{secrets.SSH_PRIVATE_KEY}}
          script: |
            cd /home/${{secrets.SSH_USER}}/deploy
            echo ${{secrets.DOCKER_TOKEN}} | docker login -u ${{secrets.DOCKER_USER}} --password-stdin
            docker-compose down
            docker-compose pull
            docker-compose up -d --force-recreate
            docker logout
      - name: Enviar correo con IP
        if: always()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USER }}
          password: ${{ secrets.EMAIL_PASS }}
          from: ${{ secrets.EMAIL_USER }}
          to: joelalejsanchez@gmail.com
          subject: "Resultado del despliegue Terraform"
          body: |
            Estado del job: ${{ job.status }}
            IP pública de la VM:  ${{ steps.final_ip.outputs.public_ip }}
